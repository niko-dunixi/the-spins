// Code generated by vfsgen; DO NOT EDIT.

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 19, 16, 20, 38, 831907000, time.UTC),
		},
		"/can-i-haz-muzic.sh": &vfsgen۰CompressedFileInfo{
			name:             "can-i-haz-muzic.sh",
			modTime:          time.Date(2019, 8, 16, 16, 3, 51, 755044797, time.UTC),
			uncompressedSize: 589,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\xae\xd3\x30\x10\x46\xf7\x7e\x8a\xa9\x61\x3b\x71\xda\x52\x81\x82\x0a\x4b\x84\x40\xec\x11\x42\x28\x75\x26\x8d\x25\xff\x29\xb6\x93\xa6\x55\xdf\x1d\xa5\x89\x42\xc3\xdd\xdc\x95\x35\x9a\xe3\xef\x78\xc6\x6f\x36\x22\x85\x56\x9c\x94\x15\x64\x3b\x38\x95\xa1\x61\x81\x22\x20\x31\xa6\x6a\xd8\x40\x1c\x3c\xc1\xe0\x52\x4c\x27\xc2\x4a\xc3\x27\x10\x15\x75\xc2\x26\xad\x3f\x42\x6c\xc8\x32\x00\x92\x8d\x03\xfe\xd3\x25\xb0\x44\x55\xf1\x84\xf3\xb1\x7b\x51\x11\xb6\xbb\xf7\x8c\xf4\xbf\xc4\xba\x36\x9e\xce\xaf\x4a\x9b\xd0\x55\x52\xad\x18\x0b\xce\x9e\xff\xa4\x56\x1f\x79\x13\xa3\x0f\x85\x10\x7d\xdf\x67\xb3\x3a\x93\xce\x88\xbe\x8c\xb2\xf9\xdc\x1d\xaf\x1f\xe4\xf9\xc7\xf7\x2f\xd6\x7e\x7b\xc7\xa7\x6b\xb5\xd2\x74\xe4\x36\x78\x1c\x5c\xc2\xe0\x95\x45\x43\x28\x5d\x47\x6d\x66\xfc\x9e\x33\xed\x9c\x9f\xa9\x47\x77\xac\xa7\xce\xb8\x95\x5f\xb0\x01\xac\x81\x67\xe2\xed\x6d\xc9\xbb\x73\xf8\xbd\xcc\xf0\xb4\x30\x3e\x33\xa9\xd5\x77\x0e\x88\x74\x89\x6d\x29\x23\x96\xa9\x52\x0e\x70\x3a\xb1\x76\xad\x29\x23\x18\xbf\x7f\x20\x24\x81\x9b\x0e\x6e\x77\x58\x19\xc6\xc1\xff\xf3\x2f\x2f\x5d\xf9\xe7\xf5\xa2\x5a\xf4\x33\x82\x21\x40\x9e\x17\xf9\xb6\xd8\x1e\xb2\x43\x0e\x18\xdd\x5c\xef\xf6\x59\x9e\x03\x4a\x90\xce\x0f\x2f\xb2\x47\xf3\xf4\x31\x5f\xa1\x29\xaf\x60\xd2\x55\xc9\x02\xd6\xcc\xdf\x00\x00\x00\xff\xff\xa7\x40\x24\x2b\x4d\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/can-i-haz-muzic.sh"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
